namespace Tangle.Net.Mam.Unit.Tests.Mam
{
  using System.Configuration;

  using Microsoft.VisualStudio.TestTools.UnitTesting;

  using Tangle.Net.Cryptography;
  using Tangle.Net.Entity;
  using Tangle.Net.Mam.Mam;
  using Tangle.Net.Mam.Merkle;
  using Tangle.Net.Utils;

  /// <summary>
  /// The mam channel test.
  /// </summary>
  [TestClass]
  public class MamChannelTest
  {
    /// <summary>
    /// The test public channel creation.
    /// </summary>
    [TestMethod]
    public void TestPublicChannelCreation()
    {
      var seed = new Seed("JETCPWLCYRM9XYQMMZIFZLDBZZEWRMRVGWGGNCUH9LFNEHKEMLXAVEOFFVOATCNKVKELNQFAGOVUNWEJI");
      var mamFactory = new CurlMamFactory(new Curl(), new CurlMask());
      var treeFactory = new CurlMerkleTreeFactory(new CurlMerkleNodeFactory(new Curl()), new CurlMerkleLeafFactory(new AddressGenerator(seed)));

      var channelFactory = new MamChannelFactory(mamFactory, new CurlMamParser(new CurlMask(), treeFactory),  treeFactory, new InMemoryIotaRepository());
      var channel = channelFactory.Create(Mode.Public, seed);

      Assert.AreEqual(seed.Value, channel.Seed.Value);
      Assert.AreEqual(Mode.Public, channel.Mode);
      Assert.AreEqual(SecurityLevel.Medium, channel.SecurityLevel);
    }

    /// <summary>
    /// The test restricted channel creation.
    /// </summary>
    [TestMethod]
    public void TestRestrictedChannelCreation()
    {
      var seed = new Seed("JETCPWLCYRM9XYQMMZIFZLDBZZEWRMRVGWGGNCUH9LFNEHKEMLXAVEOFFVOATCNKVKELNQFAGOVUNWEJI");
      var mamFactory = new CurlMamFactory(new Curl(), new CurlMask());
      var treeFactory = new CurlMerkleTreeFactory(new CurlMerkleNodeFactory(new Curl()), new CurlMerkleLeafFactory(new AddressGenerator(seed)));

      var channelFactory = new MamChannelFactory(mamFactory, new CurlMamParser(new CurlMask(), treeFactory), treeFactory, new InMemoryIotaRepository());
      var channelKey = new TryteString("NXRZEZIKWGKIYDPVBRKWLYTWLUVSDLDCHVVSVIWDCIUZRAKPJUIABQDZBV9EGTJWUFTIGAUT9STIENCBC");
      var channel = channelFactory.Create(Mode.Restricted, seed, SecurityLevel.Medium, channelKey);

      Assert.AreEqual(seed.Value, channel.Seed.Value);
      Assert.AreEqual(Mode.Restricted, channel.Mode);
      Assert.AreEqual(SecurityLevel.Medium, channel.SecurityLevel);
      Assert.AreEqual(channelKey.Value, channel.Key.Value);
      Assert.AreEqual(Hash.Empty.Value, channel.NextRoot.Value);
      Assert.AreEqual(0, channel.Index);
      Assert.AreEqual(0, channel.Start);
      Assert.AreEqual(1, channel.Count);
      Assert.AreEqual(1, channel.NextCount);
    }

    /// <summary>
    /// The test restricted message creation.
    /// </summary>
    [TestMethod]
    public void TestRestrictedMessageCreation()
    {
      var bundle = new Bundle();
      bundle.AddTransfer(new Transfer
                           {
                             Address = new Address(),
                             Message = new TryteString
                             Tag = new Tag("ASDF"),
                             Timestamp = Timestamp.UnixSecondsTimestamp
                           });

      bundle.Finalize();
      bundle.Sign();

      var seed = new Seed("JETCPWLCYRM9XYQMMZIFZLDBZZEWRMRVGWGGNCUH9LFNEHKEMLXAVEOFFVOATCNKVKELNQFAGOVUNWEJI");  
      var mamFactory = new CurlMamFactory(new Curl(), new CurlMask());
      var treeFactory = new CurlMerkleTreeFactory(new CurlMerkleNodeFactory(new Curl()), new CurlMerkleLeafFactory(new AddressGenerator(seed)));

      var channelFactory = new MamChannelFactory(mamFactory, new CurlMamParser(new CurlMask(), treeFactory), treeFactory, new InMemoryIotaRepository());
      var channelKey = new TryteString("NXRZEZIKWGKIYDPVBRKWLYTWLUVSDLDCHVVSVIWDCIUZRAKPJUIABQDZBV9EGTJWUFTIGAUT9STIENCBC");
      var channel = channelFactory.Create(Mode.Restricted, seed, SecurityLevel.Medium, channelKey);

      var message = channel.CreateMessage(new TryteString("IREALLYWANTTHISTOWORKINCSHARPASWELLPLEASEMAKEITHAPPEN"));

      Assert.AreEqual("ILUOWHDESMHWKVHTRVOF9YERPLWCXEZPJBYGLWOHWCRWMCS9GHICAZTKEZVN9JYQLBIWVXKSTWNZIUAVV", message.Root.Value);
      Assert.AreEqual("HJEDRSLPPDMJQLDWQAGF9CFDVOQTTVXWDRGMVQ9YJYUAQFZWFZZEV9WUP9NVHVPIEHRKZ9UDGAULMHWBK", message.Address.Value);
      Assert.AreEqual("WRYIKYCOMNQKCPRMT99POCFEAPOEDHVKIDFI9FUFYNUOVHZHQPHYQJFRN9JNLXTKWZZMJECJCGSEZ9LIH", message.NextRoot.Value);

      Assert.AreEqual("WRYIKYCOMNQKCPRMT99POCFEAPOEDHVKIDFI9FUFYNUOVHZHQPHYQJFRN9JNLXTKWZZMJECJCGSEZ9LIH", channel.NextRoot.Value);

      for (var i = 0; i < bundle.Transactions.Count; i++)
      {
        Assert.AreEqual(bundle.Transactions[i].Fragment.Value, message.Payload.Transactions[i].Fragment.Value);
      }
    }
  }
}